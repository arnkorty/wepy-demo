'use strict';

/*
    ## Utilities
*/
var Util = {};

Util.extend = function extend() {
    var target = arguments[0] || {},
        i = 1,
        length = arguments.length,
        options,
        name,
        src,
        copy,
        clone;

    if (length === 1) {
        target = this;
        i = 0;
    }

    for (; i < length; i++) {
        options = arguments[i];
        if (!options) continue;

        for (name in options) {
            src = target[name];
            copy = options[name];

            if (target === copy) continue;
            if (copy === undefined) continue;

            if (Util.isArray(copy) || Util.isObject(copy)) {
                if (Util.isArray(copy)) clone = src && Util.isArray(src) ? src : [];
                if (Util.isObject(copy)) clone = src && Util.isObject(src) ? src : {};

                target[name] = Util.extend(clone, copy);
            } else {
                target[name] = copy;
            }
        }
    }

    return target;
};

Util.each = function each(obj, iterator, context) {
    var i, key;
    if (this.type(obj) === 'number') {
        for (i = 0; i < obj; i++) {
            iterator(i, i);
        }
    } else if (obj.length === +obj.length) {
        for (i = 0; i < obj.length; i++) {
            if (iterator.call(context, obj[i], i, obj) === false) break;
        }
    } else {
        for (key in obj) {
            if (iterator.call(context, obj[key], key, obj) === false) break;
        }
    }
};

Util.type = function type(obj) {
    return obj === null || obj === undefined ? String(obj) : Object.prototype.toString.call(obj).match(/\[object (\w+)\]/)[1].toLowerCase();
};

Util.each('String Object Array RegExp Function'.split(' '), function (value) {
    Util['is' + value] = function (obj) {
        return Util.type(obj) === value.toLowerCase();
    };
});

Util.isObjectOrArray = function (value) {
    return Util.isObject(value) || Util.isArray(value);
};

Util.isNumeric = function (value) {
    return !isNaN(parseFloat(value)) && isFinite(value);
};

Util.keys = function (obj) {
    var keys = [];
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) keys.push(key);
    }
    return keys;
};
Util.values = function (obj) {
    var values = [];
    for (var key in obj) {
        if (obj.hasOwnProperty(key)) values.push(obj[key]);
    }
    return values;
};

/*
    ### Mock.heredoc(fn)

    * Mock.heredoc(fn)

    以直观、安全的方式书写（多行）HTML 模板。

    **使用示例**如下所示：

        var tpl = Mock.heredoc(function() {
            /*!
        {{email}}{{age}}
        <!-- Mock { 
            email: '@EMAIL',
            age: '@INT(1,100)'
        } -->
            *\/
        })
    
    **相关阅读**
    * [Creating multiline strings in JavaScript](http://stackoverflow.com/questions/805107/creating-multiline-strings-in-javascript)、
*/
Util.heredoc = function heredoc(fn) {
    // 1. 移除起始的 function(){ /*!
    // 2. 移除末尾的 */ }
    // 3. 移除起始和末尾的空格
    return fn.toString().replace(/^[^\/]+\/\*!?/, '').replace(/\*\/[^\/]+$/, '').replace(/^[\s\xA0]+/, '').replace(/[\s\xA0]+$/, ''); // .trim()
};

Util.noop = function () {};

module.exports = Util;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwuanMiXSwibmFtZXMiOlsiVXRpbCIsImV4dGVuZCIsInRhcmdldCIsImFyZ3VtZW50cyIsImkiLCJsZW5ndGgiLCJvcHRpb25zIiwibmFtZSIsInNyYyIsImNvcHkiLCJjbG9uZSIsInVuZGVmaW5lZCIsImlzQXJyYXkiLCJpc09iamVjdCIsImVhY2giLCJvYmoiLCJpdGVyYXRvciIsImNvbnRleHQiLCJrZXkiLCJ0eXBlIiwiY2FsbCIsIlN0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwibWF0Y2giLCJ0b0xvd2VyQ2FzZSIsInNwbGl0IiwidmFsdWUiLCJpc09iamVjdE9yQXJyYXkiLCJpc051bWVyaWMiLCJpc05hTiIsInBhcnNlRmxvYXQiLCJpc0Zpbml0ZSIsImtleXMiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2giLCJ2YWx1ZXMiLCJoZXJlZG9jIiwiZm4iLCJyZXBsYWNlIiwibm9vcCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7OztBQUdBLElBQUlBLE9BQU8sRUFBWDs7QUFFQUEsS0FBS0MsTUFBTCxHQUFjLFNBQVNBLE1BQVQsR0FBa0I7QUFDNUIsUUFBSUMsU0FBU0MsVUFBVSxDQUFWLEtBQWdCLEVBQTdCO0FBQUEsUUFDSUMsSUFBSSxDQURSO0FBQUEsUUFFSUMsU0FBU0YsVUFBVUUsTUFGdkI7QUFBQSxRQUdJQyxPQUhKO0FBQUEsUUFHYUMsSUFIYjtBQUFBLFFBR21CQyxHQUhuQjtBQUFBLFFBR3dCQyxJQUh4QjtBQUFBLFFBRzhCQyxLQUg5Qjs7QUFLQSxRQUFJTCxXQUFXLENBQWYsRUFBa0I7QUFDZEgsaUJBQVMsSUFBVDtBQUNBRSxZQUFJLENBQUo7QUFDSDs7QUFFRCxXQUFPQSxJQUFJQyxNQUFYLEVBQW1CRCxHQUFuQixFQUF3QjtBQUNwQkUsa0JBQVVILFVBQVVDLENBQVYsQ0FBVjtBQUNBLFlBQUksQ0FBQ0UsT0FBTCxFQUFjOztBQUVkLGFBQUtDLElBQUwsSUFBYUQsT0FB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QyxPQUFQLEdBQWlCM0MsSUFBakIiLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gICAgIyMgVXRpbGl0aWVzXG4qL1xudmFyIFV0aWwgPSB7fVxuXG5VdGlsLmV4dGVuZCA9IGZ1bmN0aW9uIGV4dGVuZCgpIHtcbiAgICB2YXIgdGFyZ2V0ID0gYXJndW1lbnRzWzBdIHx8IHt9LFxuICAgICAgICBpID0gMSxcbiAgICAgICAgbGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aCxcbiAgICAgICAgb3B0aW9ucywgbmFtZSwgc3JjLCBjb3B5LCBjbG9uZVxuXG4gICAgaWYgKGxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0YXJnZXQgPSB0aGlzXG4gICAgICAgIGkgPSAwXG4gICAgfVxuXG4gICAgZm9yICg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBvcHRpb25zID0gYXJndW1lbnRzW2ldXG4gICAgICAgIGlmICghb3B0aW9ucykgY29udGludWVcblxuICAgICAgICBmb3IgKG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgc3JjID0gdGFyZ2V0W25hbWVdXG4gICAgICAgICAgICBjb3B5ID0gb3B0aW9uc1tuYW1lXVxuXG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSBjb3B5KSBjb250aW51ZVxuICAgICAgICAgICAgaWYgKGNvcHkgPT09IHVuZGVmaW5lZCkgY29udGludWVcblxuICAgICAgICAgICAgaWYgKFV0aWwuaXNBcnJheShjb3B5KSB8fCBVdGlsLmlzT2JqZWN0KGNvcHkpKSB7XG4gICAgICAgICAgICAgICAgaWYgKFV0aWwuaXNBcnJheShjb3B5KSkgY2xvbmUgPSBzcmMgJiYgVXRpbC5pc0FycmF5KHNyYykgPyBzcmMgOiBbXVxuICAgICAgICAgICAgICAgIGlmIChVdGlsLmlzT2JqZWN0KGNvcHkpKSBjbG9uZSA9IHNyYyAmJiBVdGlsLmlzT2JqZWN0KHNyYykgPyBzcmMgOiB7fVxuXG4gICAgICAgICAgICAgICAgdGFyZ2V0W25hbWVdID0gVXRpbC5leHRlbmQoY2xvbmUsIGNvcHkpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtuYW1lXSA9IGNvcHlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuVXRpbC5lYWNoID0gZnVuY3Rpb24gZWFjaChvYmosIGl0ZXJhdG9yLCBjb250ZXh0KSB7XG4gICAgdmFyIGksIGtleVxuICAgIGlmICh0aGlzLnR5cGUob2JqKSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG9iajsgaSsrKSB7XG4gICAgICAgICAgICBpdGVyYXRvcihpLCBpKVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvYmoubGVuZ3RoID09PSArb2JqLmxlbmd0aCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgb2JqLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaikgPT09IGZhbHNlKSBicmVha1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChrZXkgaW4gb2JqKSB7XG4gICAgICAgICAgICBpZiAoaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpba2V5XSwga2V5LCBvYmopID09PSBmYWxzZSkgYnJlYWtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuVXRpbC50eXBlID0gZnVuY3Rpb24gdHlwZShvYmopIHtcbiAgICByZXR1cm4gKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHVuZGVmaW5lZCkgPyBTdHJpbmcob2JqKSA6IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopLm1hdGNoKC9cXFtvYmplY3QgKFxcdyspXFxdLylbMV0udG9Mb3dlckNhc2UoKVxufVxuXG5VdGlsLmVhY2goJ1N0cmluZyBPYmplY3QgQXJyYXkgUmVnRXhwIEZ1bmN0aW9uJy5zcGxpdCgnICcpLCBmdW5jdGlvbih2YWx1ZSkge1xuICAgIFV0aWxbJ2lzJyArIHZhbHVlXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgICByZXR1cm4gVXRpbC50eXBlKG9iaikgPT09IHZhbHVlLnRvTG93ZXJDYXNlKClcbiAgICB9XG59KVxuXG5VdGlsLmlzT2JqZWN0T3JBcnJheSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIFV0aWwuaXNPYmplY3QodmFsdWUpIHx8IFV0aWwuaXNBcnJheSh2YWx1ZSlcbn1cblxuVXRpbC5pc051bWVyaWMgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdCh2YWx1ZSkpICYmIGlzRmluaXRlKHZhbHVlKVxufVxuXG5VdGlsLmtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSBrZXlzLnB1c2goa2V5KVxuICAgIH1cbiAgICByZXR1cm4ga2V5cztcbn1cblV0aWwudmFsdWVzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB2YWx1ZXMucHVzaChvYmpba2V5XSlcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbn1cblxuLypcbiAgICAjIyMgTW9jay5oZXJlZG9jKGZuKVxuXG4gICAgKiBNb2NrLmhlcmVkb2MoZm4pXG5cbiAgICDku6Xnm7Top4LjgIHlronlhajnmoTmlrnlvI/kuablhpnvvIjlpJrooYzvvIlIVE1MIOaooeadv+OAglxuXG4gICAgKirkvb/nlKjnpLrkvosqKuWmguS4i+aJgOekuu+8mlxuXG4gICAgICAgIHZhciB0cGwgPSBNb2NrLmhlcmVkb2MoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvKiFcbiAgICAgICAge3tlbWFpbH19e3thZ2V9fVxuICAgICAgICA8IS0tIE1vY2sgeyBcbiAgICAgICAgICAgIGVtYWlsOiAnQEVNQUlMJyxcbiAgICAgICAgICAgIGFnZTogJ0BJTlQoMSwxMDApJ1xuICAgICAgICB9IC0tPlxuICAgICAgICAgICAgKlxcL1xuICAgICAgICB9KVxuICAgIFxuICAgICoq55u45YWz6ZiF6K+7KipcbiAgICAqIFtDcmVhdGluZyBtdWx0aWxpbmUgc3RyaW5ncyBpbiBKYXZhU2NyaXB0XShodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzgwNTEwNy9jcmVhdGluZy1tdWx0aWxpbmUtc3RyaW5ncy1pbi1qYXZhc2NyaXB0KeOAgVxuKi9cblV0aWwuaGVyZWRvYyA9IGZ1bmN0aW9uIGhlcmVkb2MoZm4pIHtcbiAgICAvLyAxLiDnp7vpmaTotbflp4vnmoQgZnVuY3Rpb24oKXsgLyohXG4gICAgLy8gMi4g56e76Zmk5pyr5bC+55qEICovIH1cbiAgICAvLyAzLiDnp7vpmaTotbflp4vlkozmnKvlsL7nmoTnqbrmoLxcbiAgICByZXR1cm4gZm4udG9TdHJpbmcoKVxuICAgICAgICAucmVwbGFjZSgvXlteXFwvXStcXC9cXCohPy8sICcnKVxuICAgICAgICAucmVwbGFjZSgvXFwqXFwvW15cXC9dKyQvLCAnJylcbiAgICAgICAgLnJlcGxhY2UoL15bXFxzXFx4QTBdKy8sICcnKS5yZXBsYWNlKC9bXFxzXFx4QTBdKyQvLCAnJykgLy8gLnRyaW0oKVxufVxuXG5VdGlsLm5vb3AgPSBmdW5jdGlvbigpIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbCJdfQ==