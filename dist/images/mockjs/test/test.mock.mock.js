'use strict';

/* global require, chai, describe, before, it */
// 数据占位符定义（Data Placeholder Definition，DPD）
var expect = chai.expect;
var Mock, $, _;

describe('Mock.mock', function () {
    before(function (done) {
        require(['mock', 'underscore', 'jquery'], function () {
            Mock = arguments[0];
            _ = arguments[1];
            $ = arguments[2];
            expect(Mock).to.not.equal(undefined);
            expect(_).to.not.equal(undefined);
            expect($).to.not.equal(undefined);
            done();
        });
    });

    describe('Mock.mock( String )', function () {
        it('@EMAIL', function () {
            var data = Mock.mock(this.test.title);
            expect(data).to.not.equal(this.test.title);
            this.test.title += ' => ' + data;
        });
    });
    describe('Mock.mock( {} )', function () {
        it('', function () {
            var tpl = {
                'list|1-10': [{
                    'id|+1': 1,
                    'email': '@EMAIL'
                }]
            };
            var data = Mock.mock(tpl);
            this.test.title = JSON.stringify(tpl /*, null, 4*/) + ' => ' + JSON.stringify(data /*, null, 4*/);
            expect(data).to.have.property('list').that.be.an('array').with.length.within(1, 10);
            _.each(data.list, function (item, index, list) {
                if (index > 0) expect(item.id).to.equal(list[index - 1].id + 1);
            });
        });
    });
    describe('Mock.mock( function() )', function () {
        it('', function () {
            var fn = function fn() {
                return Mock.mock({
                    'list|1-10': [{
                        'id|+1': 1,
                        'email': '@EMAIL'
                    }]
                });
            };
            var data = Mock.mock(fn);
            this.test.title = fn.toString() + ' => ' + JSON.stringify(data /*, null, 4*/);
            expect(data).to.have.property('list').that.be.an('array').with.length.within(1, 10);
            _.each(data.list, function (item, index, list) {
                if (index > 0) expect(item.id).to.equal(list[index - 1].id + 1);
            });
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QubW9jay5tb2NrLmpzIl0sIm5hbWVzIjpbImV4cGVjdCIsImNoYWkiLCJNb2NrIiwiJCIsIl8iLCJkZXNjcmliZSIsImJlZm9yZSIsImRvbmUiLCJyZXF1aXJlIiwiYXJndW1lbnRzIiwidG8iLCJub3QiLCJlcXVhbCIsInVuZGVmaW5lZCIsIml0IiwiZGF0YSIsIm1vY2siLCJ0ZXN0IiwidGl0bGUiLCJ0cGwiLCJKU09OIiwic3RyaW5naWZ5IiwiaGF2ZSIsInByb3BlcnR5IiwidGhhdCIsImJlIiwiYW4iLCJ3aXRoIiwibGVuZ3RoIiwid2l0aGluIiwiZWFjaCIsImxpc3QiLCJpdGVtIiwiaW5kZXgiLCJpZCIsImZuIiwidG9TdHJpbmciXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBLElBQUlBLFNBQVNDLEtBQUtELE1BQWxCO0FBQ0EsSUFBSUUsSUFBSixFQUFVQyxDQUFWLEVBQWFDLENBQWI7O0FBRUFDLFNBQVMsV0FBVCxFQUFzQixZQUFXO0FBQzdCQyxXQUFPLFVBQVNDLElBQVQsRUFBZTtBQUNsQkMsZ0JBQVEsQ0FBQyxNQUFELEVBQVMsWUFBVCxFQUF1QixRQUF2QixDQUFSLEVBQTBDLFlBQVc7QUFDakROLG1CQUFPTyxVQUFVLENBQVYsQ0FBUDtBQUNBTCxnQkFBSUssVUFBVSxDQUFWLENBQUo7QUFDQU4sZ0JBQUlNLFVBQVUsQ0FBVixDQUFKO0FBQ0FULG1CQUFPRSxJQUFQLEVBQWFRLEVBQWIsQ0FBZ0JDLEdBQWhCLENBQW9CQyxLQUFwQixDQUEwQkMsU0FBMUI7QUFDQWIsbUJBQU9JLENBQVAsRUFBVU0sRUFBVixDQUFhQyxHQUFiLENBQWlCQyxLQUFqQixDQUF1QkMsU0FBdkI7QUFDQWIsbUJBQU9HLENBQVAsRUFBVU8sRUFBVixDQUFhQyxHQUFiLENBQWlCQyxLQUFqQixDQUF1QkMsU0FBdkI7QUFDQU47QUFDSCxTQVJEO0FBU0gsS0FWRDs7QUFZQUYsYUFBUyxxQkFBVCxFQUFnQyxZQUFXO0FBQ3ZDUyxXQUFHLFFBQUgsRUFBYSxZQUFXO0FBQ3BCLGdCQUFJQyxPQUFPYixLQUFLYyxJQUFMLENBQVUsS0FBS0MsSUFBTCxDQUFVQyxLQUFwQixDQUFYO0FBQ0FsQixtQkFBT2UsSUFBUCxFQUFhTCxFQUFiLENBQWdCQyxHQUFoQixDQUFvQkMsS0FBcEIsQ0FBMEIsS0FBS0ssSUFBTCxDQUFVQyxLQUFwQztBQUNBLGlCQUFLRCxJQUFMLENBQVVDLEtBQVYsSUFBbUIsU0FBU0gsSUFBNUI7QUFDSCxTQUpEO0FBS0gsS0FORDtBQU9BVixhQUFTLGlCQUFULEVBQTRCLFlBQVc7QUFDbkNTLFdBQUcsRUFBSCxFQUFPLFlBQVc7QUFDZCxnQkFBSUssTUFBTTtBQUNOLDZCQUFhLENBQUM7QUFDViw2QkFBUyxDQURDO0FBRVYsNkJBQVM7QUFGQyxpQkFBRDtBQURQLGFBQVY7QUFNQSxnQkFBSUosT0FBT2IsS0FBS2MsSUFBTCxDQUFVRyxHQUFWLENBQVg7QUFDQSxpQkFBS0YsSUFBTCxDQUFVQyxLQUFWLEdBQWtCRSxLQUFLQyxTQUFMLENBQWVGLEdBQWYsQ0FBbUIsYUFBbkIsSUFBcUMsTUFBckMsR0FBOENDLEtBQUtDLFNBQUwsQ0FBZU4sSUFBZixDQUFvQixhQUFwQixDQUFoRTtBQUNBZixtQkFBT2UsSUFBUCxFQUFhTCxFQUFiLENBQWdCWSxJQUFoQixDQUFxQkMsUUFBckIsQ0FBOEIsTUFBOUIsRUFDS0MsSUFETCxDQUNVQyxFQURWLENBQ2FDLEVBRGIsQ0FDZ0IsT0FEaEIsRUFDeUJDLElBRHpCLENBQzhCQyxNQUQ5QixDQUNxQ0MsTUFEckMsQ0FDNEMsQ0FENUMsRUFDK0MsRUFEL0M7QUFFQXpCLGNBQUUwQixJQUFGLENBQU9mLEtBQUtnQixJQUFaLEVBQWtCLFVBQVNDLElBQVQsRUFBZUMsS0FBZixFQUFzQkYsSUFBdEIsRUFBNEI7QUFDMUMsb0JBQUlFLFFBQVEsQ0FBWixFQUFlakMsT0FBT2dDLEtBQUtFLEVBQVosRUFBZ0J4QixFQUFoQixDQUFtQkUsS0FBbkIsQ0FBeUJtQixLQUFLRSxRQUFRLENBQWIsRUFBZ0JDLEVBQWhCLEdBQXFCLENBQTlDO0FBQ2xCLGFBRkQ7QUFHSCxTQWREO0FBZUgsS0FoQkQ7QUFpQkE3QixhQUFTLHlCQUFULEVBQW9DLFlBQVc7QUFDM0NTLFdBQUcsRUFBSCxFQUFPLFlBQVc7QUFDZCxnQkFBSXFCLEtBQUssU0FBTEEsRUFBSyxHQUFXO0FBQ2hCLHVCQUFPakMsS0FBS2MsSUFBTCxDQUFVO0FBQ2IsaUNBQWEsQ0FBQztBQUNWLGlDQUFTLENBREM7QUFFVixpQ0FBUztBQUZDLHFCQUFEO0FBREEsaUJBQVYsQ0FBUDtBQU1ILGFBUEQ7QUFRQSxnQkFBSUQsT0FBT2IsS0FBS2MsSUFBTCxDQUFVbUIsRUFBVixDQUFYO0FBQ0EsaUJBQUtsQixJQUFMLENBQVVDLEtBQVYsR0FBa0JpQixHQUFHQyxRQUFILEtBQWdCLE1BQWhCLEdBQXlCaEIsS0FBS0MsU0FBTCxDQUFlTixJQUFmLENBQW9CLGFBQXBCLENBQTNDO0FBQ0FmLG1CQUFPZSxJQUFQLEVBQWFMLEVBQWIsQ0FBZ0JZLElBQWhCLENBQXFCQyxRQUFyQixDQUE4QixNQUE5QixFQUNLQyxJQURMLENBQ1VDLEVBRFYsQ0FDYUMsRUFEYixDQUNnQixPQURoQixFQUN5QkMsSUFEekIsQ0FDOEJDLE1BRDlCLENBQ3FDQyxNQURyQyxDQUM0QyxDQUQ1QyxFQUMrQyxFQUQvQztBQUVBekIsY0FBRTBCLElBQUYsQ0FBT2YsS0FBS2dCLElBQVosRUFBa0IsVUFBU0MsSUFBVCxFQUFlQyxLQUFmLEVBQXNCRixJQUF0QixFQUE0QjtBQUMxQyxvQkFBSUUsUUFBUSxDQUFaLEVBQWVqQyxPQUFPZ0MsS0FBS0UsRUFBWixFQUFnQnhCLEVBQWhCLENBQW1CRSxLQUFuQixDQUF5Qm1CLEtBQUtFLFFBQVEsQ0FBYixFQUFnQkMsRUFBaEIsR0FBcUIsQ0FBOUM7QUFDbEIsYUFGRDtBQUdILFNBaEJEO0FBaUJILEtBbEJEO0FBbUJILENBeEREIiwiZmlsZSI6InRlc3QubW9jay5tb2NrLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHJlcXVpcmUsIGNoYWksIGRlc2NyaWJlLCBiZWZvcmUsIGl0ICovXG4vLyDmlbDmja7ljaDkvY3nrKblrprkuYnvvIhEYXRhIFBsYWNlaG9sZGVyIERlZmluaXRpb27vvIxEUETvvIlcbnZhciBleHBlY3QgPSBjaGFpLmV4cGVjdFxudmFyIE1vY2ssICQsIF9cblxuZGVzY3JpYmUoJ01vY2subW9jaycsIGZ1bmN0aW9uKCkge1xuICAgIGJlZm9yZShmdW5jdGlvbihkb25lKSB7XG4gICAgICAgIHJlcXVpcmUoWydtb2NrJywgJ3VuZGVyc2NvcmUnLCAnanF1ZXJ5J10sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgTW9jayA9IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgXyA9IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgJCA9IGFyZ3VtZW50c1syXVxuICAgICAgICAgICAgZXhwZWN0KE1vY2spLnRvLm5vdC5lcXVhbCh1bmRlZmluZWQpXG4gICAgICAgICAgICBleHBlY3QoXykudG8ubm90LmVxdWFsKHVuZGVmaW5lZClcbiAgICAgICAgICAgIGV4cGVjdCgkKS50by5ub3QuZXF1YWwodW5kZWZpbmVkKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pXG4gICAgfSlcblxuICAgIGRlc2NyaWJlKCdNb2NrLm1vY2soIFN0cmluZyApJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGl0KCdARU1BSUwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gTW9jay5tb2NrKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgICAgIGV4cGVjdChkYXRhKS50by5ub3QuZXF1YWwodGhpcy50ZXN0LnRpdGxlKVxuICAgICAgICAgICAgdGhpcy50ZXN0LnRpdGxlICs9ICcgPT4gJyArIGRhdGFcbiAgICAgICAgfSlcbiAgICB9KVxuICAgIGRlc2NyaWJlKCdNb2NrLm1vY2soIHt9ICknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaXQoJycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHRwbCA9IHtcbiAgICAgICAgICAgICAgICAnbGlzdHwxLTEwJzogW3tcbiAgICAgICAgICAgICAgICAgICAgJ2lkfCsxJzogMSxcbiAgICAgICAgICAgICAgICAgICAgJ2VtYWlsJzogJ0BFTUFJTCdcbiAgICAgICAgICAgICAgICB9XVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGRhdGEgPSBNb2NrLm1vY2sodHBsKVxuICAgICAgICAgICAgdGhpcy50ZXN0LnRpdGxlID0gSlNPTi5zdHJpbmdpZnkodHBsIC8qLCBudWxsLCA0Ki8gKSArICcgPT4gJyArIEpTT04uc3RyaW5naWZ5KGRhdGEgLyosIG51bGwsIDQqLyApXG4gICAgICAgICAgICBleHBlY3QoZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgnbGlzdCcpXG4gICAgICAgICAgICAgICAgLnRoYXQuYmUuYW4oJ2FycmF5Jykud2l0aC5sZW5ndGgud2l0aGluKDEsIDEwKVxuICAgICAgICAgICAgXy5lYWNoKGRhdGEubGlzdCwgZnVuY3Rpb24oaXRlbSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSBleHBlY3QoaXRlbS5pZCkudG8uZXF1YWwobGlzdFtpbmRleCAtIDFdLmlkICsgMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSlcbiAgICBkZXNjcmliZSgnTW9jay5tb2NrKCBmdW5jdGlvbigpICknLCBmdW5jdGlvbigpIHtcbiAgICAgICAgaXQoJycsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGZuID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIE1vY2subW9jayh7XG4gICAgICAgICAgICAgICAgICAgICdsaXN0fDEtMTAnOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2lkfCsxJzogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICdlbWFpbCc6ICdARU1BSUwnXG4gICAgICAgICAgICAgICAgICAgIH1dXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBkYXRhID0gTW9jay5tb2NrKGZuKVxuICAgICAgICAgICAgdGhpcy50ZXN0LnRpdGxlID0gZm4udG9TdHJpbmcoKSArICcgPT4gJyArIEpTT04uc3RyaW5naWZ5KGRhdGEgLyosIG51bGwsIDQqLyApXG4gICAgICAgICAgICBleHBlY3QoZGF0YSkudG8uaGF2ZS5wcm9wZXJ0eSgnbGlzdCcpXG4gICAgICAgICAgICAgICAgLnRoYXQuYmUuYW4oJ2FycmF5Jykud2l0aC5sZW5ndGgud2l0aGluKDEsIDEwKVxuICAgICAgICAgICAgXy5lYWNoKGRhdGEubGlzdCwgZnVuY3Rpb24oaXRlbSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAwKSBleHBlY3QoaXRlbS5pZCkudG8uZXF1YWwobGlzdFtpbmRleCAtIDFdLmlkICsgMSlcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfSlcbn0pIl19