'use strict';

/* global require, chai, describe, before, it */
// 数据占位符定义（Data Placeholder Definition，DPD）
var expect = chai.expect;
var Mock, $, _;

describe('DPD', function () {
    before(function (done) {
        require(['mock', 'underscore', 'jquery'], function () {
            Mock = arguments[0];
            _ = arguments[1];
            $ = arguments[2];
            expect(Mock).to.not.equal(undefined);
            expect(_).to.not.equal(undefined);
            expect($).to.not.equal(undefined);
            done();
        });
    });
    describe('Reference', function () {
        it('@EMAIL', function () {
            var data = Mock.mock(this.test.title);
            expect(data).to.not.equal(this.test.title);
        });
    });
    describe('Priority', function () {
        it('@EMAIL', function () {
            var data = Mock.mock({
                email: 'nuysoft@gmail.com',
                name: '@EMAIL'
            });
            this.test.title += ' => ' + data.name;
            expect(data.name).to.not.equal(data.email);
        });
        it('@email', function () {
            var data = Mock.mock({
                email: 'nuysoft@gmail.com',
                name: '@email'
            });
            this.test.title += ' => ' + data.name;
            expect(data.name).to.equal(data.email);
        });
    });
    describe('Escape', function () {
        it('\@EMAIL', function () {
            var data = Mock.mock(this.test.title);
            this.test.title += ' => ' + data;
            expect(data).to.not.equal(this.test.title);
        });
        it('\\@EMAIL', function () {
            var data = Mock.mock(this.test.title);
            this.test.title += ' => ' + data;
            expect(data).to.not.equal(this.test.title);
        });
        it('\\\@EMAIL', function () {
            var data = Mock.mock(this.test.title);
            this.test.title += ' => ' + data;
            expect(data).to.not.equal(this.test.title);
        });
        it('\\\\@EMAIL', function () {
            var data = Mock.mock(this.test.title);
            this.test.title += ' => ' + data;
            expect(data).to.not.equal(this.test.title);
        });
    });
    describe('Path', function () {
        it('Absolute Path', function () {
            var data = Mock.mock({
                id: '@UUID',
                children: [{
                    parentId: '@/id'
                }],
                child: {
                    parentId: '@/id'
                }
            });
            expect(data.children[0]).to.have.property('parentId', data.id);
            expect(data.child).to.have.property('parentId', data.id);
        });
        it('Relative Path', function () {
            var data = Mock.mock({
                id: '@UUID',
                children: [{
                    parentId: '@../../id'
                }],
                child: {
                    parentId: '@../id'
                }
            });
            expect(data.children[0]).to.have.property('parentId', data.id);
            expect(data.child).to.have.property('parentId', data.id);
        });
    });
    describe('Complex', function () {
        var tpl = {
            basics: {
                boolean1: '@BOOLEAN',
                boolean2: '@BOOLEAN(1, 9, true)',

                natural1: '@NATURAL',
                natural2: '@NATURAL(10000)',
                natural3: '@NATURAL(60, 100)',

                integer1: '@INTEGER',
                integer2: '@INTEGER(10000)',
                integer3: '@INTEGER(60, 100)',

                float1: '@FLOAT',
                float2: '@FLOAT(0)',
                float3: '@FLOAT(60, 100)',
                float4: '@FLOAT(60, 100, 3)',
                float5: '@FLOAT(60, 100, 3, 5)',

                character1: '@CHARACTER',
                character2: '@CHARACTER("lower")',
                character3: '@CHARACTER("upper")',
                character4: '@CHARACTER("number")',
                character5: '@CHARACTER("symbol")',
                character6: '@CHARACTER("aeiou")',

                string1: '@STRING',
                string2: '@STRING(5)',
                string3: '@STRING("lower",5)',
                string4: '@STRING(7, 10)',
                string5: '@STRING("aeiou", 1, 3)',

                range1: '@RANGE(10)',
                range2: '@RANGE(3, 7)',
                range3: '@RANGE(1, 10, 2)',
                range4: '@RANGE(1, 10, 3)',

                date: '@DATE',
                time: '@TIME',

                datetime1: '@DATETIME',
                datetime2: '@DATETIME("yyyy-MM-dd A HH:mm:ss")',
                datetime3: '@DATETIME("yyyy-MM-dd a HH:mm:ss")',
                datetime4: '@DATETIME("yy-MM-dd HH:mm:ss")',
                datetime5: '@DATETIME("y-MM-dd HH:mm:ss")',
                datetime6: '@DATETIME("y-M-d H:m:s")',

                now: '@NOW',
                nowYear: '@NOW("year")',
                nowMonth: '@NOW("month")',
                nowDay: '@NOW("day")',
                nowHour: '@NOW("hour")',
                nowMinute: '@NOW("minute")',
                nowSecond: '@NOW("second")',
                nowWeek: '@NOW("week")',
                nowCustom: '@NOW("yyyy-MM-dd HH:mm:ss SS")'
            },
            image: {
                image1: '@IMAGE',
                image2: '@IMAGE("100x200", "#000")',
                image3: '@IMAGE("100x200", "#000", "hello")',
                image4: '@IMAGE("100x200", "#000", "#FFF", "hello")',
                image5: '@IMAGE("100x200", "#000", "#FFF", "png", "hello")',

                dataImage1: '@DATAIMAGE',
                dataImage2: '@DATAIMAGE("200x100")',
                dataImage3: '@DATAIMAGE("300x100", "Hello Mock.js!")'
            },
            color: {
                color: '@COLOR',
                render: function render() {
                    $('.header').css('background', this.color);
                }
            },
            text: {
                title1: '@TITLE',
                title2: '@TITLE(5)',
                title3: '@TITLE(3, 5)',

                word1: '@WORD',
                word2: '@WORD(5)',
                word3: '@WORD(3, 5)',

                sentence1: '@SENTENCE',
                sentence2: '@SENTENCE(5)',
                sentence3: '@SENTENCE(3, 5)',

                paragraph1: '@PARAGRAPH',
                paragraph2: '@PARAGRAPH(2)',
                paragraph3: '@PARAGRAPH(1, 3)'
            },
            name: {
                first: '@FIRST',
                last: '@LAST',
                name1: '@NAME',
                name2: '@NAME(true)'
            },
            web: {
                url: '@URL',
                domain: '@DOMAIN',
                email: '@EMAIL',
                ip: '@IP',
                tld: '@TLD'
            },
            address: {
                region: '@REGION',
                province: '@PROVINCE',
                city: '@CITY',
                county: '@COUNTY'
            },
            miscellaneous: {
                guid: '@GUID',
                id: '@ID',
                'increment1|3': ['@INCREMENT'],
                'increment2|3': ['@INCREMENT(10)']
            },
            helpers: {
                capitalize1: '@CAPITALIZE()',
                capitalize2: '@CAPITALIZE("hello")',

                upper1: '@UPPER',
                upper2: '@UPPER("hello")',

                lower1: '@LOWER',
                lower2: '@LOWER("HELLO")',

                pick1: '@PICK',
                pick2: '@PICK("abc")',
                pick3: '@PICK(["a", "b", "c"])',

                shuffle1: '@SHUFFLE',
                shuffle2: '@SHUFFLE(["a", "b", "c"])'
            }
        };
        it('', function () {
            var data = Mock.mock(tpl);
            // this.test.title += JSON.stringify(data, null, 4)
            expect(data).to.be.a('object');
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QubW9jay5zcGVjLmRwZC5qcyJdLCJuYW1lcyI6WyJleHBlY3QiLCJjaGFpIiwiTW9jayIsIiQiLCJfIiwiZGVzY3JpYmUiLCJiZWZvcmUiLCJkb25lIiwicmVxdWlyZSIsImFyZ3VtZW50cyIsInRvIiwibm90IiwiZXF1YWwiLCJ1bmRlZmluZWQiLCJpdCIsImRhdGEiLCJtb2NrIiwidGVzdCIsInRpdGxlIiwiZW1haWwiLCJuYW1lIiwiaWQiLCJjaGlsZHJlbiIsInBhcmVudElkIiwiY2hpbGQiLCJoYXZlIiwicHJvcGVydHkiLCJ0cGwiLCJiYXNpY3MiLCJib29sZWFuMSIsImJvb2xlYW4yIiwibmF0dXJhbDEiLCJuYXR1cmFsMiIsIm5hdHVyYWwzIiwiaW50ZWdlcjEiLCJpbnRlZ2VyMiIsImludGVnZXIzIiwiZmxvYXQxIiwiZmxvYXQyIiwiZmxvYXQzIiwiZmxvYXQ0IiwiZmxvYXQ1IiwiY2hhcmFjdGVyMSIsImNoYXJhY3RlcjIiLCJjaGFyYWN0ZXIzIiwiY2hhcmFjdGVyNCIsImNoYXJhY3RlcjUiLCJjaGFyYWN0ZXI2Iiwic3RyaW5nMSIsInN0cmluZzIiLCJzdHJpbmczIiwic3RyaW5nNCIsInN0cmluZzUiLCJyYW5nZTEiLCJyYW5nZTIiLCJyYW5nZTMiLCJyYW5nZTQiLCJkYXRlIiwidGltZSIsImRhdGV0aW1lMSIsImRhdGV0aW1lMiIsImRhdGV0aW1lMyIsImRhdGV0aW1lNCIsImRhdGV0aW1lNSIsImRhdGV0aW1lNiIsIm5vdyIsIm5vd1llYXIiLCJub3dNb250aCIsIm5vd0RheSIsIm5vd0hvdXIiLCJub3dNaW51dGUiLCJub3dTZWNvbmQiLCJub3dXZWVrIiwibm93Q3VzdG9tIiwiaW1hZ2UiLCJpbWFnZTEiLCJpbWFnZTIiLCJpbWFnZTMiLCJpbWFnZTQiLCJpbWFnZTUiLCJkYXRhSW1hZ2UxIiwiZGF0YUltYWdlMiIsImRhdGFJbWFnZTMiLCJjb2xvciIsInJlbmRlciIsImNzcyIsInRleHQiLCJ0aXRsZTEiLCJ0aXRsZTIiLCJ0aXRsZTMiLCJ3b3JkMSIsIndvcmQyIiwid29yZDMiLCJzZW50ZW5jZTEiLCJzZW50ZW5jZTIiLCJzZW50ZW5jZTMiLCJwYXJhZ3JhcGgxIiwicGFyYWdyYXBoMiIsInBhcmFncmFwaDMiLCJmaXJzdCIsImxhc3QiLCJuYW1lMSIsIm5hbWUyIiwid2ViIiwidXJsIiwiZG9tYWluIiwiaXAiLCJ0bGQiLCJhZGRyZXNzIiwicmVnaW9uIiwicHJvdmluY2UiLCJjaXR5IiwiY291bnR5IiwibWlzY2VsbGFuZW91cyIsImd1aWQiLCJoZWxwZXJzIiwiY2FwaXRhbGl6ZTEiLCJjYXBpdGFsaXplMiIsInVwcGVyMSIsInVwcGVyMiIsImxvd2VyMSIsImxvd2VyMiIsInBpY2sxIiwicGljazIiLCJwaWNrMyIsInNodWZmbGUxIiwic2h1ZmZsZTIiLCJiZSIsImEiXSwibWFwcGluZ3MiOiI7O0FBQUE7QUFDQTtBQUNBLElBQUlBLFNBQVNDLEtBQUtELE1BQWxCO0FBQ0EsSUFBSUUsSUFBSixFQUFVQyxDQUFWLEVBQWFDLENBQWI7O0FBRUFDLFNBQVMsS0FBVCxFQUFnQixZQUFXO0FBQ3ZCQyxXQUFPLFVBQVNDLElBQVQsRUFBZTtBQUNsQkMsZ0JBQVEsQ0FBQyxNQUFELEVBQVMsWUFBVCxFQUF1QixRQUF2QixDQUFSLEVBQTBDLFlBQVc7QUFDakROLG1CQUFPTyxVQUFVLENBQVYsQ0FBUDtBQUNBTCxnQkFBSUssVUFBVSxDQUFWLENBQUo7QUFDQU4sZ0JBQUlNLFVBQVUsQ0FBVixDQUFKO0FBQ0FULG1CQUFPRSxJQUFQLEVBQWFRLEVBQWIsQ0FBZ0JDLEdBQWhCLENBQW9CQyxLQUFwQixDQUEwQkMsU0FBMUI7QUFDQWIsbUJBQU9JLENBQVAsRUFBVU0sRUFBVixDQUFhQyxHQUFiLENBQWlCQyxLQUFqQixDQUF1QkMsU0FBdkI7QUFDQWIsbUJBQU9HLENBQVAsRUFBVU8sRUFBVixDQUFhQyxHQUFiLENBQWlCQyxLQUFqQixDQUF1QkMsU0FBdkI7QUFDQU47QUFDSCxTQVJEO0FBU0gsS0FWRDtBQVdBRixhQUFT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RjtBQVlMQyx1QkFBTyx3QkFaRjs7QUFjTEMsMEJBQVUsVUFkTDtBQWVMQywwQkFBVTtBQWZMO0FBeEhILFNBQVY7QUEwSUFoSCxXQUFHLEVBQUgsRUFBTyxZQUFXO0FBQ2QsZ0JBQUlDLE9BQU9iLEtBQUtjLElBQUwsQ0FBVVcsR0FBVixDQUFYO0FBQ0E7QUFDQTNCLG1CQUFPZSxJQUFQLEVBQWFMLEVBQWIsQ0FBZ0JxSCxFQUFoQixDQUFtQkMsQ0FBbkIsQ0FBcUIsUUFBckI7QUFDSCxTQUpEO0FBS0gsS0FoSkQ7QUFpSkgsQ0F4T0QiLCJmaWxlIjoidGVzdC5tb2NrLnNwZWMuZHBkLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZ2xvYmFsIHJlcXVpcmUsIGNoYWksIGRlc2NyaWJlLCBiZWZvcmUsIGl0ICovXG4vLyDmlbDmja7ljaDkvY3nrKblrprkuYnvvIhEYXRhIFBsYWNlaG9sZGVyIERlZmluaXRpb27vvIxEUETvvIlcbnZhciBleHBlY3QgPSBjaGFpLmV4cGVjdFxudmFyIE1vY2ssICQsIF9cblxuZGVzY3JpYmUoJ0RQRCcsIGZ1bmN0aW9uKCkge1xuICAgIGJlZm9yZShmdW5jdGlvbihkb25lKSB7XG4gICAgICAgIHJlcXVpcmUoWydtb2NrJywgJ3VuZGVyc2NvcmUnLCAnanF1ZXJ5J10sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgTW9jayA9IGFyZ3VtZW50c1swXVxuICAgICAgICAgICAgXyA9IGFyZ3VtZW50c1sxXVxuICAgICAgICAgICAgJCA9IGFyZ3VtZW50c1syXVxuICAgICAgICAgICAgZXhwZWN0KE1vY2spLnRvLm5vdC5lcXVhbCh1bmRlZmluZWQpXG4gICAgICAgICAgICBleHBlY3QoXykudG8ubm90LmVxdWFsKHVuZGVmaW5lZClcbiAgICAgICAgICAgIGV4cGVjdCgkKS50by5ub3QuZXF1YWwodW5kZWZpbmVkKVxuICAgICAgICAgICAgZG9uZSgpXG4gICAgICAgIH0pXG4gICAgfSlcbiAgICBkZXNjcmliZSgnUmVmZXJlbmNlJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGl0KCdARU1BSUwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gTW9jay5tb2NrKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgICAgIGV4cGVjdChkYXRhKS50by5ub3QuZXF1YWwodGhpcy50ZXN0LnRpdGxlKVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgZGVzY3JpYmUoJ1ByaW9yaXR5JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGl0KCdARU1BSUwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gTW9jay5tb2NrKHtcbiAgICAgICAgICAgICAgICBlbWFpbDogJ251eXNvZnRAZ21haWwuY29tJyxcbiAgICAgICAgICAgICAgICBuYW1lOiAnQEVNQUlMJ1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIHRoaXMudGVzdC50aXRsZSArPSAnID0+ICcgKyBkYXRhLm5hbWVcbiAgICAgICAgICAgIGV4cGVjdChkYXRhLm5hbWUpLnRvLm5vdC5lcXVhbChkYXRhLmVtYWlsKVxuICAgICAgICB9KVxuICAgICAgICBpdCgnQGVtYWlsJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IE1vY2subW9jayh7XG4gICAgICAgICAgICAgICAgZW1haWw6ICdudXlzb2Z0QGdtYWlsLmNvbScsXG4gICAgICAgICAgICAgICAgbmFtZTogJ0BlbWFpbCdcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB0aGlzLnRlc3QudGl0bGUgKz0gJyA9PiAnICsgZGF0YS5uYW1lXG4gICAgICAgICAgICBleHBlY3QoZGF0YS5uYW1lKS50by5lcXVhbChkYXRhLmVtYWlsKVxuICAgICAgICB9KVxuICAgIH0pXG4gICAgZGVzY3JpYmUoJ0VzY2FwZScsIGZ1bmN0aW9uKCkge1xuICAgICAgICBpdCgnXFxARU1BSUwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gTW9jay5tb2NrKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgICAgIHRoaXMudGVzdC50aXRsZSArPSAnID0+ICcgKyBkYXRhXG4gICAgICAgICAgICBleHBlY3QoZGF0YSkudG8ubm90LmVxdWFsKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgfSlcbiAgICAgICAgaXQoJ1xcXFxARU1BSUwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gTW9jay5tb2NrKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgICAgIHRoaXMudGVzdC50aXRsZSArPSAnID0+ICcgKyBkYXRhXG4gICAgICAgICAgICBleHBlY3QoZGF0YSkudG8ubm90LmVxdWFsKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgfSlcbiAgICAgICAgaXQoJ1xcXFxcXEBFTUFJTCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBNb2NrLm1vY2sodGhpcy50ZXN0LnRpdGxlKVxuICAgICAgICAgICAgdGhpcy50ZXN0LnRpdGxlICs9ICcgPT4gJyArIGRhdGFcbiAgICAgICAgICAgIGV4cGVjdChkYXRhKS50by5ub3QuZXF1YWwodGhpcy50ZXN0LnRpdGxlKVxuICAgICAgICB9KVxuICAgICAgICBpdCgnXFxcXFxcXFxARU1BSUwnLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBkYXRhID0gTW9jay5tb2NrKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgICAgIHRoaXMudGVzdC50aXRsZSArPSAnID0+ICcgKyBkYXRhXG4gICAgICAgICAgICBleHBlY3QoZGF0YSkudG8ubm90LmVxdWFsKHRoaXMudGVzdC50aXRsZSlcbiAgICAgICAgfSlcbiAgICB9KVxuICAgIGRlc2NyaWJlKCdQYXRoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgIGl0KCdBYnNvbHV0ZSBQYXRoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IE1vY2subW9jayh7XG4gICAgICAgICAgICAgICAgaWQ6ICdAVVVJRCcsXG4gICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudElkOiAnQC9pZCdcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICBjaGlsZDoge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRJZDogJ0AvaWQnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGV4cGVjdChkYXRhLmNoaWxkcmVuWzBdKS50by5oYXZlLnByb3BlcnR5KCdwYXJlbnRJZCcsIGRhdGEuaWQpXG4gICAgICAgICAgICBleHBlY3QoZGF0YS5jaGlsZCkudG8uaGF2ZS5wcm9wZXJ0eSgncGFyZW50SWQnLCBkYXRhLmlkKVxuICAgICAgICB9KVxuICAgICAgICBpdCgnUmVsYXRpdmUgUGF0aCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIGRhdGEgPSBNb2NrLm1vY2soe1xuICAgICAgICAgICAgICAgIGlkOiAnQFVVSUQnLFxuICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRJZDogJ0AuLi8uLi9pZCdcbiAgICAgICAgICAgICAgICB9XSxcbiAgICAgICAgICAgICAgICBjaGlsZDoge1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRJZDogJ0AuLi9pZCdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgZXhwZWN0KGRhdGEuY2hpbGRyZW5bMF0pLnRvLmhhdmUucHJvcGVydHkoJ3BhcmVudElkJywgZGF0YS5pZClcbiAgICAgICAgICAgIGV4cGVjdChkYXRhLmNoaWxkKS50by5oYXZlLnByb3BlcnR5KCdwYXJlbnRJZCcsIGRhdGEuaWQpXG4gICAgICAgIH0pXG5cbiAgICB9KVxuICAgIGRlc2NyaWJlKCdDb21wbGV4JywgZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciB0cGwgPSB7XG4gICAgICAgICAgICBiYXNpY3M6IHtcbiAgICAgICAgICAgICAgICBib29sZWFuMTogJ0BCT09MRUFOJyxcbiAgICAgICAgICAgICAgICBib29sZWFuMjogJ0BCT09MRUFOKDEsIDksIHRydWUpJyxcblxuICAgICAgICAgICAgICAgIG5hdHVyYWwxOiAnQE5BVFVSQUwnLFxuICAgICAgICAgICAgICAgIG5hdHVyYWwyOiAnQE5BVFVSQUwoMTAwMDApJyxcbiAgICAgICAgICAgICAgICBuYXR1cmFsMzogJ0BOQVRVUkFMKDYwLCAxMDApJyxcblxuICAgICAgICAgICAgICAgIGludGVnZXIxOiAnQElOVEVHRVInLFxuICAgICAgICAgICAgICAgIGludGVnZXIyOiAnQElOVEVHRVIoMTAwMDApJyxcbiAgICAgICAgICAgICAgICBpbnRlZ2VyMzogJ0BJTlRFR0VSKDYwLCAxMDApJyxcblxuICAgICAgICAgICAgICAgIGZsb2F0MTogJ0BGTE9BVCcsXG4gICAgICAgICAgICAgICAgZmxvYXQyOiAnQEZMT0FUKDApJyxcbiAgICAgICAgICAgICAgICBmbG9hdDM6ICdARkxPQVQoNjAsIDEwMCknLFxuICAgICAgICAgICAgICAgIGZsb2F0NDogJ0BGTE9BVCg2MCwgMTAwLCAzKScsXG4gICAgICAgICAgICAgICAgZmxvYXQ1OiAnQEZMT0FUKDYwLCAxMDAsIDMsIDUpJyxcblxuICAgICAgICAgICAgICAgIGNoYXJhY3RlcjE6ICdAQ0hBUkFDVEVSJyxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXIyOiAnQENIQVJBQ1RFUihcImxvd2VyXCIpJyxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXIzOiAnQENIQVJBQ1RFUihcInVwcGVyXCIpJyxcbiAgICAgICAgICAgICAgICBjaGFyYWN0ZXI0OiAnQENIQVJBQ1RFUihcIm51bWJlclwiKScsXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyNTogJ0BDSEFSQUNURVIoXCJzeW1ib2xcIiknLFxuICAgICAgICAgICAgICAgIGNoYXJhY3RlcjY6ICdAQ0hBUkFDVEVSKFwiYWVpb3VcIiknLFxuXG4gICAgICAgICAgICAgICAgc3RyaW5nMTogJ0BTVFJJTkcnLFxuICAgICAgICAgICAgICAgIHN0cmluZzI6ICdAU1RSSU5HKDUpJyxcbiAgICAgICAgICAgICAgICBzdHJpbmczOiAnQFNUUklORyhcImxvd2VyXCIsNSknLFxuICAgICAgICAgICAgICAgIHN0cmluZzQ6ICdAU1RSSU5HKDcsIDEwKScsXG4gICAgICAgICAgICAgICAgc3RyaW5nNTogJ0BTVFJJTkcoXCJhZWlvdVwiLCAxLCAzKScsXG5cbiAgICAgICAgICAgICAgICByYW5nZTE6ICdAUkFOR0UoMTApJyxcbiAgICAgICAgICAgICAgICByYW5nZTI6ICdAUkFOR0UoMywgNyknLFxuICAgICAgICAgICAgICAgIHJhbmdlMzogJ0BSQU5HRSgxLCAxMCwgMiknLFxuICAgICAgICAgICAgICAgIHJhbmdlNDogJ0BSQU5HRSgxLCAxMCwgMyknLFxuXG4gICAgICAgICAgICAgICAgZGF0ZTogJ0BEQVRFJyxcbiAgICAgICAgICAgICAgICB0aW1lOiAnQFRJTUUnLFxuXG4gICAgICAgICAgICAgICAgZGF0ZXRpbWUxOiAnQERBVEVUSU1FJyxcbiAgICAgICAgICAgICAgICBkYXRldGltZTI6ICdAREFURVRJTUUoXCJ5eXl5LU1NLWRkIEEgSEg6bW06c3NcIiknLFxuICAgICAgICAgICAgICAgIGRhdGV0aW1lMzogJ0BEQVRFVElNRShcInl5eXktTU0tZGQgYSBISDptbTpzc1wiKScsXG4gICAgICAgICAgICAgICAgZGF0ZXRpbWU0OiAnQERBVEVUSU1FKFwieXktTU0tZGQgSEg6bW06c3NcIiknLFxuICAgICAgICAgICAgICAgIGRhdGV0aW1lNTogJ0BEQVRFVElNRShcInktTU0tZGQgSEg6bW06c3NcIiknLFxuICAgICAgICAgICAgICAgIGRhdGV0aW1lNjogJ0BEQVRFVElNRShcInktTS1kIEg6bTpzXCIpJyxcblxuICAgICAgICAgICAgICAgIG5vdzogJ0BOT1cnLFxuICAgICAgICAgICAgICAgIG5vd1llYXI6ICdATk9XKFwieWVhclwiKScsXG4gICAgICAgICAgICAgICAgbm93TW9udGg6ICdATk9XKFwibW9udGhcIiknLFxuICAgICAgICAgICAgICAgIG5vd0RheTogJ0BOT1coXCJkYXlcIiknLFxuICAgICAgICAgICAgICAgIG5vd0hvdXI6ICdATk9XKFwiaG91clwiKScsXG4gICAgICAgICAgICAgICAgbm93TWludXRlOiAnQE5PVyhcIm1pbnV0ZVwiKScsXG4gICAgICAgICAgICAgICAgbm93U2Vjb25kOiAnQE5PVyhcInNlY29uZFwiKScsXG4gICAgICAgICAgICAgICAgbm93V2VlazogJ0BOT1coXCJ3ZWVrXCIpJyxcbiAgICAgICAgICAgICAgICBub3dDdXN0b206ICdATk9XKFwieXl5eS1NTS1kZCBISDptbTpzcyBTU1wiKSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpbWFnZToge1xuICAgICAgICAgICAgICAgIGltYWdlMTogJ0BJTUFHRScsXG4gICAgICAgICAgICAgICAgaW1hZ2UyOiAnQElNQUdFKFwiMTAweDIwMFwiLCBcIiMwMDBcIiknLFxuICAgICAgICAgICAgICAgIGltYWdlMzogJ0BJTUFHRShcIjEwMHgyMDBcIiwgXCIjMDAwXCIsIFwiaGVsbG9cIiknLFxuICAgICAgICAgICAgICAgIGltYWdlNDogJ0BJTUFHRShcIjEwMHgyMDBcIiwgXCIjMDAwXCIsIFwiI0ZGRlwiLCBcImhlbGxvXCIpJyxcbiAgICAgICAgICAgICAgICBpbWFnZTU6ICdASU1BR0UoXCIxMDB4MjAwXCIsIFwiIzAwMFwiLCBcIiNGRkZcIiwgXCJwbmdcIiwgXCJoZWxsb1wiKScsXG5cbiAgICAgICAgICAgICAgICBkYXRhSW1hZ2UxOiAnQERBVEFJTUFHRScsXG4gICAgICAgICAgICAgICAgZGF0YUltYWdlMjogJ0BEQVRBSU1BR0UoXCIyMDB4MTAwXCIpJyxcbiAgICAgICAgICAgICAgICBkYXRhSW1hZ2UzOiAnQERBVEFJTUFHRShcIjMwMHgxMDBcIiwgXCJIZWxsbyBNb2NrLmpzIVwiKSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcjoge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAnQENPTE9SJyxcbiAgICAgICAgICAgICAgICByZW5kZXI6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAkKCcuaGVhZGVyJykuY3NzKCdiYWNrZ3JvdW5kJywgdGhpcy5jb2xvcilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdGV4dDoge1xuICAgICAgICAgICAgICAgIHRpdGxlMTogJ0BUSVRMRScsXG4gICAgICAgICAgICAgICAgdGl0bGUyOiAnQFRJVExFKDUpJyxcbiAgICAgICAgICAgICAgICB0aXRsZTM6ICdAVElUTEUoMywgNSknLFxuXG4gICAgICAgICAgICAgICAgd29yZDE6ICdAV09SRCcsXG4gICAgICAgICAgICAgICAgd29yZDI6ICdAV09SRCg1KScsXG4gICAgICAgICAgICAgICAgd29yZDM6ICdAV09SRCgzLCA1KScsXG5cbiAgICAgICAgICAgICAgICBzZW50ZW5jZTE6ICdAU0VOVEVOQ0UnLFxuICAgICAgICAgICAgICAgIHNlbnRlbmNlMjogJ0BTRU5URU5DRSg1KScsXG4gICAgICAgICAgICAgICAgc2VudGVuY2UzOiAnQFNFTlRFTkNFKDMsIDUpJyxcblxuICAgICAgICAgICAgICAgIHBhcmFncmFwaDE6ICdAUEFSQUdSQVBIJyxcbiAgICAgICAgICAgICAgICBwYXJhZ3JhcGgyOiAnQFBBUkFHUkFQSCgyKScsXG4gICAgICAgICAgICAgICAgcGFyYWdyYXBoMzogJ0BQQVJBR1JBUEgoMSwgMyknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbmFtZToge1xuICAgICAgICAgICAgICAgIGZpcnN0OiAnQEZJUlNUJyxcbiAgICAgICAgICAgICAgICBsYXN0OiAnQExBU1QnLFxuICAgICAgICAgICAgICAgIG5hbWUxOiAnQE5BTUUnLFxuICAgICAgICAgICAgICAgIG5hbWUyOiAnQE5BTUUodHJ1ZSknXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgd2ViOiB7XG4gICAgICAgICAgICAgICAgdXJsOiAnQFVSTCcsXG4gICAgICAgICAgICAgICAgZG9tYWluOiAnQERPTUFJTicsXG4gICAgICAgICAgICAgICAgZW1haWw6ICdARU1BSUwnLFxuICAgICAgICAgICAgICAgIGlwOiAnQElQJyxcbiAgICAgICAgICAgICAgICB0bGQ6ICdAVExEJyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhZGRyZXNzOiB7XG4gICAgICAgICAgICAgICAgcmVnaW9uOiAnQFJFR0lPTicsXG4gICAgICAgICAgICAgICAgcHJvdmluY2U6ICdAUFJPVklOQ0UnLFxuICAgICAgICAgICAgICAgIGNpdHk6ICdAQ0lUWScsXG4gICAgICAgICAgICAgICAgY291bnR5OiAnQENPVU5UWSdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBtaXNjZWxsYW5lb3VzOiB7XG4gICAgICAgICAgICAgICAgZ3VpZDogJ0BHVUlEJyxcbiAgICAgICAgICAgICAgICBpZDogJ0BJRCcsXG4gICAgICAgICAgICAgICAgJ2luY3JlbWVudDF8Myc6IFtcbiAgICAgICAgICAgICAgICAgICAgJ0BJTkNSRU1FTlQnXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAnaW5jcmVtZW50MnwzJzogW1xuICAgICAgICAgICAgICAgICAgICAnQElOQ1JFTUVOVCgxMCknXG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhlbHBlcnM6IHtcbiAgICAgICAgICAgICAgICBjYXBpdGFsaXplMTogJ0BDQVBJVEFMSVpFKCknLFxuICAgICAgICAgICAgICAgIGNhcGl0YWxpemUyOiAnQENBUElUQUxJWkUoXCJoZWxsb1wiKScsXG5cbiAgICAgICAgICAgICAgICB1cHBlcjE6ICdAVVBQRVInLFxuICAgICAgICAgICAgICAgIHVwcGVyMjogJ0BVUFBFUihcImhlbGxvXCIpJyxcblxuICAgICAgICAgICAgICAgIGxvd2VyMTogJ0BMT1dFUicsXG4gICAgICAgICAgICAgICAgbG93ZXIyOiAnQExPV0VSKFwiSEVMTE9cIiknLFxuXG4gICAgICAgICAgICAgICAgcGljazE6ICdAUElDSycsXG4gICAgICAgICAgICAgICAgcGljazI6ICdAUElDSyhcImFiY1wiKScsXG4gICAgICAgICAgICAgICAgcGljazM6ICdAUElDSyhbXCJhXCIsIFwiYlwiLCBcImNcIl0pJyxcblxuICAgICAgICAgICAgICAgIHNodWZmbGUxOiAnQFNIVUZGTEUnLFxuICAgICAgICAgICAgICAgIHNodWZmbGUyOiAnQFNIVUZGTEUoW1wiYVwiLCBcImJcIiwgXCJjXCJdKSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpdCgnJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgZGF0YSA9IE1vY2subW9jayh0cGwpXG4gICAgICAgICAgICAvLyB0aGlzLnRlc3QudGl0bGUgKz0gSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgNClcbiAgICAgICAgICAgIGV4cGVjdChkYXRhKS50by5iZS5hKCdvYmplY3QnKVxuICAgICAgICB9KVxuICAgIH0pXG59KSJdfQ==